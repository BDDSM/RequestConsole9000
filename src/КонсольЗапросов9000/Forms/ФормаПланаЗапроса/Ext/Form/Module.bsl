
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КопироватьДанныеФормы(Параметры.Объект, Объект);
	Обработка = РеквизитФормыВЗначение("Объект");
	
	АдресРезультатаЗапроса = Параметры.АдресРезультатаЗапроса;
	РезультатВПакете = Параметры.РезультатВПакете;
	стРезультатЗапроса = ПолучитьИзВременногоХранилища(АдресРезультатаЗапроса);
	маРезультатЗапроса = стРезультатЗапроса.Результат;
	стРезультат = маРезультатЗапроса[Число(РезультатВПакете) - 1];
	
	стрСобытиеТЖ = Обработка.ТехнологическийЖурнал_ПолучитьИнформациюПоЗапросу(стРезультат.ЗапросИД, 
	                                                                 стРезультат.ВремяНачалаЗапроса, стРезультат.ДлительностьВМиллисекундах);
	ТекстСобытияЖурнала.УстановитьТекст(стрСобытиеТЖ);
	
	маТекстыСобытий = Новый Массив;
	маСобытия = Новый Массив;
	чСтрока = 1;
	Пока Истина Цикл
		
		стСобытие = ТехнологическийЖурнал_НайтиСобытиеПоСтрокам(ТекстСобытияЖурнала, чСтрока);
		
		Если стСобытие = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		чСтрока = стСобытие.КонечнаяСтрока + 1;
	
		маТекстСобытия = Новый Массив;
		Для й = стСобытие.НачальнаяСтрока По стСобытие.КонечнаяСтрока Цикл
			маТекстСобытия.Добавить(ТекстСобытияЖурнала.ПолучитьСтроку(й));
		КонецЦикла;
		
		стрТекстСобытия = СтрСоединить(маТекстСобытия, "
		                                              |");
		
		стСобытие = ТехнологическийЖурнал_РазобратьСобытие(стрТекстСобытия);
		
		стрТекстЗапроса = Неопределено;
		Если НЕ стСобытие.Свойство("Sql", стрТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		Если стрТекстЗапроса = "COMMIT TRANSACTION" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ стСобытие.Свойство("planSQLText") Тогда
			Продолжить;
		КонецЕсли;
		
		маТекстыСобытий.Добавить(стрТекстСобытия);
		маСобытия.Добавить(стСобытие);
		
	КонецЦикла;
	
	Если маСобытия.Количество() < 1 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Событие = маСобытия[маСобытия.ВГраница()];
	
	УстановитьТекстЗапроса();
	УстановитьПланЗапроса();
																	 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УбратьКавычки(Строка, СимволКавычек = Неопределено)
	
	Если СимволКавычек = Неопределено Тогда
		Возврат УбратьКавычки(УбратьКавычки(Строка, "'"), """");
	КонецЕсли;
	
	Если Лев(Строка, 1) = СимволКавычек Тогда
		Результат = Прав(Строка, СтрДлина(Строка) - 1);
	Иначе
		Результат = Строка;
	КонецЕсли;
	
	Если Прав(Результат, 1) = СимволКавычек Тогда
		Возврат Лев(Результат, СтрДлина(Результат) - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстЗапроса()
	Перем стрТекст, стрПараметры;
	
	Если Событие.Свойство("Sql", стрТекст) Тогда
		ТекстЗапроса = УбратьКавычки(стрТекст);
	КонецЕсли;
	
	Если Событие.Свойство("Prm", стрПараметры) Тогда
		ПараметрыЗапроса = УбратьКавычки(стрПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПланЗапроса()
	
	ТекстПлан = Новый ТекстовыйДокумент;
	ТекстПлан.УстановитьТекст(УбратьКавычки(Событие.planSQLText));
	
	й = 1;
	Пока й <= ТекстПлан.КоличествоСтрок() Цикл
		Если ЗначениеЗаполнено(ТекстПлан.ПолучитьСтроку(й)) Тогда
			й = й + 1;
		Иначе
			ТекстПлан.УдалитьСтроку(й);
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстПлан.КоличествоСтрок() < 1 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ТекстПлан.ПолучитьСтроку(1);
	Ъ = СтрНайти(Строка, "|");
	стрПоказатели = Лев(Строка, Ъ - 1);
	чКоличествоПоказателей = СтрЧислоВхождений(стрПоказатели, ",");
	
	стрУзел = "|--";
	чДлинаУзла = СтрДлина(стрУзел);
	
	соРодители = Новый Соответствие;
	СтрокаДерева = План;
	
	Для й = 1 По ТекстПлан.КоличествоСтрок() Цикл
		
		Строка = ТекстПлан.ПолучитьСтроку(й);
		Ъ = СтрНайти(Строка, ",", , , чКоличествоПоказателей);
		стрПоказатели = Лев(Строка, Ъ - 1);
		стрОператоры = Прав(Строка, СтрДлина(Строка) - Ъ);
		
		маПоказатели = СтрРазделить(стрПоказатели, ",");
		
		Ъ = СтрНайти(стрОператоры, стрУзел);
		стрПропуски = Лев(стрОператоры, Ъ - 1);
		стрОператоры = Прав(стрОператоры, СтрДлина(стрОператоры) - Ъ + 1 - чДлинаУзла);
		
		чКлючРодителя = СтрДлина(стрПропуски);
		
		Родитель = соРодители[чКлючРодителя];
		Если Родитель = Неопределено Тогда
			Родитель = СтрокаДерева;
			соРодители[чКлючРодителя] = Родитель;
		КонецЕсли;
		
		СтрокаДерева = Родитель.ПолучитьЭлементы().Добавить();
		СтрокаДерева.Оператор = стрОператоры;
		
		Rows = СокрЛП(маПоказатели[0]);
		Executes = СокрЛП(маПоказатели[1]);
		Estimate_rows = СокрЛП(маПоказатели[2]);
		Estimate_IO = СокрЛП(маПоказатели[3]);
		Estimate_CPU = СокрЛП(маПоказатели[4]);
		Avg_row_size = СокрЛП(маПоказатели[5]);
		Totat_subtree_cost = СокрЛП(маПоказатели[6]);
		Estimate_executions = СокрЛП(маПоказатели[7]);

		СтрокаДерева.СтоимостьОператора = "?";
		СтрокаДерева.СтоимостьУзла = Totat_subtree_cost; 
		СтрокаДерева.СтрокПланФакт = СтрШаблон("%1 / %2", Estimate_rows, Rows); 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТехнологическийЖурнал_НайтиСобытиеПоСтрокам(СобытиеЖурнала, чНачальнаяСтрокаПоиска = 1)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	ШаблонСтрокиНачалаСобытия = Обработка.РегШаблон_ПолучитьОбъектШаблон("\d\d:\d\d.\d+-\d+,.*");
	
	чНачальнаяСтрока = Неопределено;
	Для й = чНачальнаяСтрокаПоиска По СобытиеЖурнала.КоличествоСтрок() Цикл
		Строка = СобытиеЖурнала.ПолучитьСтроку(й);
		Если Обработка.РегШаблон_Соответствует(Строка, ШаблонСтрокиНачалаСобытия) Тогда
			Если ЗначениеЗаполнено(чНачальнаяСтрока) Тогда
				чКонечнаяСтрока = й - 1;
				Прервать;
			Иначе
				чНачальнаяСтрока = й;
				чКонечнаяСтрока = СобытиеЖурнала.КОличествоСтрок();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если чНачальнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	маСвойства = СтрРазделить(Строка, ",");
	
	Возврат Новый Структура("НачальнаяСтрока, КонечнаяСтрока", чНачальнаяСтрока, чКонечнаяСтрока);
	
КонецФункции

&НаСервере
Функция ТехнологическийЖурнал_РазобратьСобытие(Знач стрСобытие)
	
	стСобытие = Новый Структура;
	
	стСобытияСложноеЗначение = Новый Структура("Sql, Prm, planSQLText, Context", "Prm, Rows, Context", "RowsAffected, planSQLText", "Context");
	Для Каждого кз Из стСобытияСложноеЗначение Цикл
		
		стрСтрокаПоиска = "," + кз.Ключ + "=";
		чНачальнаяПозиция = СтрНайти(стрСобытие, стрСтрокаПоиска);
		
		Если чНачальнаяПозиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		чНачальнаяПозицияЗначения = чНачальнаяПозиция + СтрДлина(стрСтрокаПоиска);
		
		Если кз.Значение <> Неопределено Тогда
			
			чКонечнаяПозиция = 0;
			маСледИмена = СтрРазделить(кз.Значение, ",");
			Для Каждого стрИмя Из маСледИмена Цикл
				ч = СтрНайти(стрСобытие, "," + СокрЛП(стрИмя) + "=", , чНачальнаяПозицияЗначения);
				Если ч > 0 И (чКонечнаяПозиция = 0 ИЛИ чКонечнаяПозиция > ч) Тогда
					чКонечнаяПозиция = ч;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			чКонечнаяПозиция = 0;
		КонецЕсли;
		
		Если чКонечнаяПозиция = 0 Тогда
			чКонечнаяПозиция = СтрДлина(стрСобытие);
		КонецЕсли;
		
		стСобытие.Вставить(кз.Ключ, Сред(стрСобытие, чНачальнаяПозицияЗначения, чКонечнаяПозиция - чНачальнаяПозицияЗначения));
		
		стрСобытие = Лев(стрСобытие, чНачальнаяПозиция) + Прав(стрСобытие, СтрДлина(стрСобытие) - чКонечнаяПозиция);
		
	КонецЦикла;
	
	маСвойства = СтрРазделить(стрСобытие, ",");
	
	стрВремяДлительность = маСвойства[0];
	
	чПозицияМинус = СтрНайти(стрВремяДлительность, "-");
	стСобытие.Вставить("Длительность", Прав(стрВремяДлительность, СтрДлина(стрВремяДлительность) - чПозицияМинус));
	
	стрВремя = Лев(стрВремяДлительность, чПозицияМинус - 1);
	стСобытие.Вставить("Время", стрВремя);
	
	стСобытие.Вставить("Событие", маСвойства[1]);
	стСобытие.Вставить("УровеньСобытия", Число(маСвойства[2]));
	
	Для й = 3 По маСвойства.ВГраница() Цикл
		
		стрСвойство = маСвойства[й];
		чПозицияРавно = СтрНайти(стрСвойство, "=");
		
		Если чПозицияРавно = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		стрИмяСвойства = СтрЗаменить(Лев(стрСвойство, чПозицияРавно - 1), ":", "_");
		стСобытие.Вставить(стрИмяСвойства, Прав(стрСвойство, СтрДлина(стрСвойство) - чПозицияРавно));
		
	КонецЦикла;
	
	Возврат стСобытие;
	
КонецФункции